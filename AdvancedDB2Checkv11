#!/bin/bash

check_parameters() {
  local parameter_file="$1"
  local system_id="$2"
  local path="/sap_stage/AshishR/v11_CISChecks"
  local changes_file="${path}/${system_id}_changesToDo.txt"
  local log_file="${path}/${system_id}_logfile.txt"

  # Create changes file and log file with 777 access
  cd "$path"
  touch "$changes_file"
  touch "$log_file"
  chmod 777 "$changes_file"
  chmod 777 "$log_file"
  echo -e "All files created at $path " >> "$log_file"
  
  # Call the check_db2_version() function
  db2_version=$(su - db2"$system_id" -c "db2level" | grep "DB2 v" | awk '{print $5}' | sed 's/..$//')

  if [[ "${db2_version:0:3}" == "v11" ]]; then
    echo -e "DB2 Version Check\t-\t-\tVersion is v11. Need to check further." >> "$changes_file"
  else
    echo -e "DB2 Version Check\t-\t-\tVersion is not v11. This check can be ignored" >> "$changes_file"
  fi

  # Push the header to the changes_file
  echo -e "Parameter\tCurrent\t\tRecommended\tOK/NOTOK" > "$changes_file"
  echo -e "Starting parameter checks...\n" >> "$log_file"

  # Read the parameter file line by line
  while IFS= read -r line || [ -n "$line" ]; do
    echo "Processing line: $line" >> "$log_file"

    # Split the line into tagName, recommendedValue, parameterType, and optional command
    read -r tagName recommendedValue parameterType command <<<"$line"

    # Handle parameterType enclosed in double quotes
    if [[ $parameterType == \"*\" ]]; then
      parameterType=$(echo "$parameterType" | sed 's/^"\(.*\)"$/\1/')
      command="$parameterType" # Set the command as the extracted parameterType
    fi

    # Perform different actions based on the parameterType
    case $parameterType in
      DBM | dbm)
        # Retrieve value using the provided command or default command
        if [ -n "$command" ]; then
          cmd_value="$command"
        else
          cmd_value="su - db2$system_id -c \"db2 get dbm cfg\" | awk -F'=' -v tag=\"$tagName\" '/$tagName/ { gsub(/[[:space:]]+/, \"\", \$2); print \$2 }'"
        fi
        value_output=$(eval "$cmd_value" | head -n 1)
        if [ -z "$value_output" ]; then
          value_output="Value is not set"
        fi

        # Compare the current value with the recommended value
        if [ "$value_output" != "$recommendedValue" ]; then
          # Write the change to the changes file
          echo -e "$tagName\t$value_output\t$recommendedValue\tNOTOK" >> "$changes_file"
        else
          echo -e "$tagName\t$value_output\t$recommendedValue\tOK" >> "$changes_file"
        fi
        ;;
      SID | sid)
        # Retrieve value using the provided command or default command
        if [ -n "$command" ]; then
          cmd_value="$command"
        else
          cmd_value="su - db2$system_id -c \"db2 get db cfg for $system_id\" | awk -F'=' -v tag=\"$tagName\" '/$tagName/ { gsub(/[[:space:]]+/, \"\", \$2); print \$2 }'"
        fi
        value_output=$(eval "$cmd_value" | head -n 1)
        if [ -z "$value_output" ]; then
          value_output="Value is not set"
        fi

        # Compare the current value with the recommended value
        if [ "$value_output" != "$recommendedValue" ]; then
          # Write the change to the changes file
          echo -e "$tagName\t$value_output\t$recommendedValue\tNOTOK" >> "$changes_file"
        else
          echo -e "$tagName\t$value_output\t$recommendedValue\tOK" >> "$changes_file"
        fi
        ;;
      *)
        echo "Invalid parameter type: $parameterType. Skipping..." >> "$log_file"
        continue
        ;;
    esac
  done < "$parameter_file"

  echo -e "All parameter checks completed. Please check the $changes_file file for any required changes.\n" >> "$log_file"
}

# Call the check_parameters() function
check_parameters "$1" "$2"
