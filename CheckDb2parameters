#!/bin/bash

check_parameters() {
  local parameter_file=$1
  local system_id=$2
  local changes_file=$3

  echo "Starting parameter checks..."
  echo "Parameter file: $parameter_file"
  echo "SystemID: $system_id"
  echo "Changes file: $changes_file"

  # Read the parameter file line by line
  while IFS= read -r line || [ -n "$line" ]; do
    # Skip empty lines or lines starting with a comment character #
    if [[ -z "$line" || "$line" =~ ^[[:space:]]*# ]]; then
      continue
    fi

    # Split the line into tagName, recommendedValue, and parameterType
    read -r tagName recommendedValue parameterType <<<"$line"

    echo "Checking parameter: $tagName"

    # Perform different actions based on the parameterType
    case $parameterType in
      DBM | dbm)
        echo "Parameter type: DBM"
        cmd="su -db2$system_id -c 'db2 get dbm cfg | grep -i \"$tagName\"'"
        ;;
      SID | sid)
        echo "Parameter type: SID"
        cmd="su -db2$system_id -c 'db2 get db cfg for $system_id | grep -i \"$tagName\"'"
        ;;
      *)
        echo "Invalid parameter type: $parameterType. Skipping..."
        continue
        ;;
    esac

    echo "Executing command: $cmd"

    # Get the output of the command
    output=$(eval "$cmd")

    # Extract the parameter value from the output
    value=$(echo "$output" | awk -F'=' '{gsub(/^[[:space:]]+|[[:space:]]+$/, "", $2); print $2}')

    # Check if the value is empty
    if [ -z "$value" ]; then
      value="Value is not set"
    fi

    echo "Current value: $value"

    # Compare the value with the recommendedValue
    if [ "$value" != "$recommendedValue" ]; then
      echo "$tagName is $value, we need to change it to $recommendedValue" >> "$changes_file"
    fi

    echo "Parameter check completed."
  done < "$parameter_file"

  echo "All parameter checks completed. Please check the $changes_file file for any required changes."
}
